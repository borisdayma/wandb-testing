diff --git a/imagenet/main.py b/imagenet/main.py
index 829567f..5d98547 100644
--- a/imagenet/main.py
+++ b/imagenet/main.py
@@ -18,6 +18,7 @@ import torch.utils.data.distributed
 import torchvision.transforms as transforms
 import torchvision.datasets as datasets
 import torchvision.models as models
+import wandb
 
 model_names = sorted(name for name in models.__dict__
     if name.islower() and not name.startswith("__")
@@ -80,6 +81,7 @@ best_acc1 = 0
 
 def main():
     args = parser.parse_args()
+    wandb.init()
 
     if args.seed is not None:
         random.seed(args.seed)
@@ -173,6 +175,7 @@ def main_worker(gpu, ngpus_per_node, args):
                                 momentum=args.momentum,
                                 weight_decay=args.weight_decay)
 
+    wandb.watch(model)
     # optionally resume from a checkpoint
     if args.resume:
         if os.path.isfile(args.resume):
@@ -244,6 +247,7 @@ def main_worker(gpu, ngpus_per_node, args):
         # remember best acc@1 and save checkpoint
         is_best = acc1 > best_acc1
         best_acc1 = max(acc1, best_acc1)
+        wandb.log({'epoch': epoch, 'val_acc': acc1})
 
         if not args.multiprocessing_distributed or (args.multiprocessing_distributed
                 and args.rank % ngpus_per_node == 0):
@@ -294,6 +298,7 @@ def train(train_loader, model, criterion, optimizer, epoch, args):
         batch_time.update(time.time() - end)
         end = time.time()
 
+        wandb.log({'epoch': epoch, 'acc': acc1[0], 'loss': loss.item()})
         if i % args.print_freq == 0:
             print('Epoch: [{0}][{1}/{2}]\t'
                   'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
